/* ======== CONFIG GERAL ============= */
:root {
  /* font-size: 100%; 100% é 16 px, se eu colocar 1 rem em algum seletor é a referencia desses 100% que é 16 px do navegador */
  /* Pra que não tenha dificuldade de colocar os rem, basta colocar 62.5% que é 10px de 16px, entao 1 rem agora vale 10px*/
  /* (10px*100%)/16px = 62.5%
  10px ---- 0
  16px ---- 100
  */
  font-size: 62.5%;

  /* Variaveis do css, sempre colocar nomes genericos, não muito especificos, por exemplo não colocar --brand-light-green, somente --brand-light pois assim no futuro eu consigo alterar a cor, sem precisar ficar alterando o nome*/

  /* Variavel geral */
  --hue: 170;

  /* Cor, saturaçao, muita luz ou pouca luz e o alpha(opacidade)*/
  --primary-color: hsla(var(--hue), 100%, 26%, 1);
  --headline: hsla(210, 11%, 15%, 1);
  --paragraph: hsla(210, 9%, 31%, 1);

  --brand-beige: hsla(39, 100%, 97%, 1);
  /* 170(hue) - 148(--brando-light) = 22       170 - 22 = 148 */
  --brand-light: hsla(calc(var(--hue) - 22), 23%, 89%, 1);
  /* 170(hue) - 180(--brando-light) = -10       170 + 10 = 180 */
  --brand-light-2: hsl(calc(var(--hue) + 10), 14%, 97%);
  --brand-dark: hsla(var(--hue), 100%, 14%, 1);

  --bg-light: hsla(180, 14%, 97%, 1);

  --nav-height: 7.2rem;
}

* {
  margin: 0;
  padding: 0;
  /* sizing é o tamanho da caixa, eu quero que voce conte a partir da borda da caixa e não do conteudo da caixa*/
  /* Ou seja, as propriedades de largura (width) e de altura (height) incluem o tamanho padding size e a propriedade border, mas não incluem a propriedade margin. o tamanho da caixa + padding + a borda -> sem alterar o valor final, ou seja sempre vai ser por exemplo 375px que é o tamanho da caixa que foi passado para ela */
  box-sizing: border-box;
}

html {
  /* chrome://flags/#smooth-scrolling  -> enabled */
  scroll-behavior: smooth;
}

/* o % é flexivel. Com isso, o % sempre vai ser referente a onde ele esta posicionado, o body ta dentro do HTML e o HTML é o root do documento, entao ambos vao sempre pegar altura e largura de 100%*/
html,
body {
  width: 100%;
  height: 100%;
}

body {
  font-family: 'DM Sans';
  font-size: 1.6rem; /*16px*/
  text-align: center;

  /* Não conta a largura da barra */
  /* overflow: overlay; */

  background-color: var(--bg-light);
}

/* Embrulhando */
/* Classe para geral */
.wrapper {
  /* width: 37.5rem; */
  /* Tirando a largura fixa, e passando uma propriedade, a onde ela verifica o valor menor entre eles, o menor valor entre eles é de 50rem. O min procura o menor valor, se 100% da caixa for o menor valor aceita 100%, se 50 for menor fica no 50. Ou seja o tamanho maximo da minha caixa é de 50 rem, se ficar menor que 50 rem a minha caixa tem uma largura de 100% e 100% é flexivel, se for maior ela fica com 50 rem que é uma largura fixa */
  width: min(50rem, 100%);

  /* margin-right: auto;
  margin-left: auto; */
  margin-inline: auto;
  padding-inline: 2.4rem;
}

ul {
  list-style: none;
}

/* Padrao da imagem, a onde ela respeita 100% do tamanho da largura que ele esta contendo*/
img {
  max-width: 100%;
}

a {
  text-decoration: none;
  color: inherit;
}

/* 100px de espaço de todas as sections */
section {
  padding-block: 10rem;
}

/* Padrões */
section header h4 {
  /* font-weight: 700; não precisa, pois os h2 ja possuem o bold que é 700*/
  /* Unidade de medida rem tras acessibilidade, pois com ela quando a pessoa precisar chegar mais perto o texto ele automaticamente vai aumentar */
  /* Px é uma unidade fixa, rem ja é relativa. O padrao de tamanho do navegador é 16 px */
  font-size: 1.4rem;
  line-height: 150%;
  letter-spacing: 0.08rem;
  /* Cor, saturaçao, muita luz ou pouca luz e o alpha(opacidade)*/
  color: var(--primary-color);

  text-transform: uppercase;

  margin-bottom: 1.6rem;
}

section header h2 {
  font-size: 3rem;
  line-height: 3.9rem;

  color: var(--headline);
}

section header h1 {
  font-size: 3.4rem;
  color: var(--headline);
  line-height: 130%;
  margin-bottom: 2.4rem;
}

section .content p {
  font-weight: 400;
  font-size: 1.6rem;
  line-height: 150%;
  color: var(--paragraph);
}

.button {
  background: var(--primary-color);
  border: none;
  border-radius: 4rem;

  margin-bottom: 6rem;

  /* height: 6.2rem;
  width: 26.3rem; */
  /* Colocando espaçamento para ter uma respiraçao nas bordas, pois a gente tirou os tamanhos fixos */
  padding: 1.6rem 3.2rem;
  /* Esse width se adapta ao conteudo, o conteudo dele é o padding, o icone e o nome do button, dessa forma a gente remove a largura e altura fixa. */
  width: fit-content;

  color: #fff;
  text-transform: uppercase;
  font-size: 1.4rem;
  font-weight: 700;
  /* Flex mexe com o espaçamento interno da caixa, colocando uma do lado da outra, mas que é possivel manipular o alinhamento dos elementos dentro da caixa; o block mexe o espaçamento externo(ao redor) da caixa, ocupando toda a largura dela; e o inline mexe com espaçamento em linha da caixa por exemplo span.
  caixa é tudo que possui um elemento dentro, geralmente as caixas sao display block
  */
  display: flex;
  align-items: center;
  justify-content: center;
  /* Gap espaço/separaçao entre os elementos */
  gap: 1.6rem;
  cursor: pointer;

  /* text-decoration: none; */

  transition: background 0.2s;
}

.button:hover {
  background: var(--brand-dark);
}

.social-links {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 3.2rem;
}

/* Custom colors */
#services .card circle {
  fill: var(--brand-light);
}

/* vai no nav e procure o path que contem esse fill com esse valor ai */
#navigation .logo path[fill*='#00856F'],
#backToTopButton circle {
  fill: var(--primary-color);
}

body.menu-expanded #navigation .logo path,
#navigation.scroll .logo path {
  fill: white;
}

button.open-menu path[stroke*='00856F'],
#contact li path {
  stroke: var(--primary-color);
}

#navigation.scroll button.open-menu path[stroke*='00856F'] {
  stroke: white;
}

/* ============ NAVIGATION =========== */
nav {
  display: flex;

  /* padding-inline: 2.4rem; esquerda direita
  padding-block: 1.6rem; cima baixo*/
  /* padding: 1.6rem 2.4rem; */
  height: var(--nav-height);

  position: fixed;
  /* 
  Aqui centraliza o menu
  Mas estava bugando  na parte de serviços quando clicava pra abrir e fechar o menu, ele sumia
  left: 50%;
  Deslocando do eixo X
  transform: translateX(-50%); 
  */
  top: 0;
  /* Com isso, basta deixar esse menu 100vw aqui, em vez de deixar so quando estiver scrollado a pagina, porque a nav agora é uma caixa principal, que dentro dela tem um wrapper, que recebe um limite largura e margin para centralizar de forma automatica */
  width: 100vw;

  /* Z-index aqui porque o home esta sobrepondo ele com a lib de scroll*/
  z-index: 100;
}

nav .wrapper {
  display: flex;
  align-items: center;
  /* Espaço entre eles */
  justify-content: space-between;
}

nav.scroll {
  background: var(--primary-color);
  /* width: 100vw; agora toda a nav é 100vw */
}

nav button {
  background: none;
  border: none;
  cursor: pointer;
}

/* Deixamos o menu e o close menu fixo porque eles estavam ocupando espaço no nav e jogando o botao de abrir o menu para fora*/
nav .close-menu,
nav .menu {
  position: fixed;
}

/* ============ MENU-EXPANDED =========== */

/* Quando o body tiver a classe .menu-expanded ele vai procurar o .menu */
body.menu-expanded {
  overflow: hidden;
}

/*     Estou pegando todos > os filhos do primeiro nivel *      */
/* body.menu-expanded > * {
  display: none;
} */
/* Mas temos a pseudo class :not, eu falo pra ele quem não vai aplicar pra quem eu falar aqui, exceto o nav, todos sumiram, so o nav que não. Com isso, se eu navegar com o tab, eu so vou navegar com as opçoes dentro do menu. Ou seja, todos de primeiro nivel vao sumir exceto a nav*/
body.menu-expanded > :not(nav) {
  /* Tivemos que tirar o display none, pelo fato que ele apagava tudo, que não fosse nav, com isso ao clicar pra aparecer o menu ele apagava e ao fechar ele voltava tudo e fazia com que voltasse ao inicio e a onde eu mandei ir, por exemplo em serviços ele ia, mas quando clicava no menu de novo, ele voltava para o inicio*/
  /* display: none; */
  /* Com isso passamos para que a visibilidade dele esta escondido */
  visibility: hidden;
}

.menu,
.close-menu,
body.menu-expanded .open-menu {
  opacity: 0;
  visibility: hidden;
}

body.menu-expanded .menu,
body.menu-expanded .close-menu {
  opacity: 1;
  visibility: visible;
}

/* Antes do expanded ele joga o menu pra baixo */
.menu {
  transform: translateY(100%);
}

body.menu-expanded .menu {
  top: 0;
  left: 0;
  background: var(--primary-color);

  width: 100vw;
  height: 100vh;

  padding-top: var(--nav-height);

  /* Quando o body tiver o expanded o menu volta, com uma transição de 3 segundos */
  transition: transform 300ms;
  transform: translateY(0);
}

.menu ul:nth-child(1) {
  display: flex;
  flex-direction: column;
  gap: 4.8rem;

  margin-top: 6rem;

  font-weight: 700;
  font-size: 2.4rem;
  line-height: 3.1rem;

  color: white;
}

.menu .button {
  background: white;
  border-radius: 4rem;
  font-weight: 700; /*bold*/
  font-size: 1.8rem;
  line-height: 2.3rem;
  text-transform: uppercase;

  color: var(--primary-color);
  /* Em linha e com o block ele ja aplica o margin, altura, largura, a quebra de linha e ja tira a sobreposiçao dos elementos */
  display: inline-block;
  padding: 1.6rem 3.2rem;

  margin-top: 4.8rem;
  margin-bottom: 8rem;
}

.menu .button:hover {
  background-color: var(--primary-color);
  color: white;

  /* Aumenta o brilho do background */
  filter: brightness(1.2);
}

/* o z index fica 100 camadas superior que o .menu */
body.menu-expanded .logo,
body.menu-expanded nav button {
  position: relative;
  z-index: 100;
}

body.menu-expanded .logo path {
  fill: white;
}

body.menu-expanded button path {
  stroke: white;
}

/* ============ HEADER =========== */
#home {
  padding-block: 0;
  /* calculo de 4.1rem + 7.2rem */
  padding-top: calc(4.1rem + var(--nav-height));
}

/* Criando uma tag, usando uma pseudo class, a before é antes do conteudo do header */
/* fundo verde*/
#home::before {
  /* Conteudo dela é vazio */
  content: '';
  /* width: 100vw; tiramos o 100view port width porque quando da 100view port ele soma mais a barrinha do eixo y e ao somar, ele cria uma barrinha em baixo de rolagem no eixo X */
  width: 100%;
  height: calc(76% + var(--nav-height)); /*1080px + 7.2rem da altura da nav*/
  background-color: var(--brand-light);
  display: block;

  /* Agora o conteudo esta por cima de tudo, ou seja ele agora é do navegador*/
  /* Quando o elemento pai dele é relative isso faz com que ele seja relativo ao tamanho da caixa do pai dele, ou seja ele se movimenta de acordo com a caixa que ele esta não ao tamanho da view-port do navegador igual no estado padrao do absolute, mas ja que o pai dele que é o header não é relative, então se movimenta de acordo com a view port do documento, ou seja no estado padrao do absolute*/
  position: absolute;
  /* Destravando top, right, bottom e left */
  top: 0;
  left: 0;
  /* Eixo z, faz ele ficar para baixo de tudo */
  z-index: -1;
}

#home .button {
  /* Propriedades dos conceitos de caixa -> margin espaçamento externo da caixa, padding espaçamento interno da caixa, border da caixa, width largura e height altura */
  /* margin: 0 auto; */
  margin-inline: auto;
}

#home p {
  font-weight: 400;
  font-size: 1.8rem;
  line-height: 150%;
  color: var(--paragraph);
  margin-bottom: 3.2rem;
}

#home img {
  /* Precisei mexer na largura, para que no object-position da imagem acompanha-se o tamanho da fonte, ou seja em vez de px, usar o rem no object-position */
  width: 26.4rem;
  /* Tira o posicionamento em linha */
  display: block;
  /* Centraliza ela de novo */
  margin-inline: auto;
  /* Pegamos o objeto dentro do img que é a imagem em si, o img em si é uma caixa que tem um objeto dentro */
  /* Se eu não mexe-se a imagem, na largura dela, eu deixaria isso como px, em vez de rem */
  object-position: 0 2rem;
}

#home .stats {
  /* width: 32.7rem; */
  /* deixando flexivel, pegando 100% da caixa que voce esta. Fizemos isso pois ela estava transbordando*/
  width: 100%;
  /* padding: 4rem 0; */
  /* Mexe em cima e em baixo */
  padding-block: 4rem;
  /* Eixo x -> left e right */
  margin-inline: auto;

  background-color: var(--brand-beige);
  border: 0.1rem solid var(--brand-light);
  border-radius: 0.6rem;

  /* Eixo principal row é na horizontal e o eixo secundario fica na vertical*/
  display: flex;
  /* Ja na direção column ele fica como eixo principal na vertical e o eixo secundario na horizontal */
  flex-direction: column;
  /* Ele alinha em columns o eixo principal(vertical), em row no eixo secundario(vertical) */
  justify-content: center;
  /* Ele alinha em columns o eixo secundario(horizontal), em row no eixo principal(horizontal) */
  /* align-items: center; */
  gap: 6rem;
}

#home .stat h3 {
  font-size: 4.8rem;
  color: var(--headline);
  line-height: 130%;

  margin-bottom: 0.4rem;
}

#home .stat p {
  margin: 0;
  color: var(--primary-color);
  /* font-size: 1.6rem; nao precisa colocar, porque no body ja esta 1.6rem que é 16px*/
  line-height: 150%;
}

/* ============ SERVIÇOS =========== */

#services header h2 {
  margin-bottom: 6rem;
}

#services .cards {
  display: flex;
  flex-direction: column;
  /* O gap so funciona com o display flex */
  gap: 3.2rem;
}

#services .card {
  padding: 2.4rem;
  text-align: left;
  background: white;
  border: 0.1rem solid var(--brand-light);
  border-radius: 0.6rem;
}

#services .card h3 {
  margin-block: 1.6rem;
}

/* ============ ABOUT =========== */
#about {
  text-align: left;
  background-color: var(--brand-beige);
}

#about header h2 {
  margin-bottom: 2.4rem;
}

#about .content p {
  margin: 2.4rem 0 6rem 0;
}

/* ============ CONTACT =========== */
#contact {
  text-align: left;
}

#contact header {
  margin-bottom: 3.2rem;
}

#contact ul {
  display: flex;
  flex-direction: column;
  gap: 1.6rem;

  margin-bottom: 3.2rem;
}

#contact ul li {
  display: flex;
  align-items: center;
  gap: 0.8rem;
}
/* ============ footer  =========== */
footer {
  background-color: var(--primary-color);
  padding-block: 6rem;
  text-align: left;

  color: white;
}
footer .logo {
  /* Passa pra inline-block, para aceitar as propiedades em linha. Ou seja mantenha em linha, mas que aceite as propiedades que so funcionam no block, por exemplo o margin-bottom */
  display: inline-block;
  margin-bottom: 2.4rem;
}

footer .log svg {
  width: 23.6rem;
  height: 3.1rem;
}

footer .logo path {
  fill: white;
}

footer p {
  color: var(--brand-beige);
  line-height: 2;

  margin-bottom: 3.2rem;
}

footer .social-links {
  justify-content: flex-start;
}

/* BACK TO TOP */
#backToTopButton {
  position: fixed;
  bottom: 1rem;
  right: 2.5rem;

  opacity: 0;
  visibility: hidden;

  transform: translateY(100%);
  transition: 200ms;
}

#backToTopButton.show {
  opacity: 1;
  visibility: visible;
  transform: translateY(0);
}

/* ==================  RESPONSIVO: DESKTOP =================== */

/* Quando o dispositivo tiver uma largura minima de 1024px. Ou seja quando eu tiver 1024px pra cima voce vai aplica tudo. se fosse max-width:1024px ele aplicaria tudo quando estiver pra baixo do 1024*/
@media (min-width: 1024px) {
  /* ==================  GERAL =================== */
  body{
    /* Ativamos auto aqui, porque tinhamos colocado o overflow: overlay; que Não conta a largura da barra. Agora conta*/
    overflow: auto;
  }

  .wrapper {
    /* Ou voce pega 112rem ou 100%. Ate os 112(1120px) rem ele vai crescer, mais do que isso ele não cresce mais. Ou seja abaixo disso ele fica 100% que é flexivel */
    width: min(112rem, 100%);
    /* O grid trabalha com as caixas dentro  da caixa que ele estiver. Quando é display block, ele trabalha com as caixas ao redor e com isso tem quebra de linha nas caixas ao redor, tendo uma largura total. O display inline ele mantem o tamanho sem quebra de linha mantendo os elementos um do lado do outro. O display flex mexe com as caixas dentro de um caixa, mudando a direçao, o grid trabalha com essas caixas da mesma forma, so que não coloca uma do lado da outra*/
    display: grid;
  }

  /* Deixando as colunas no geral, e quando for trocar os elementos de posiçao ai ja é especifico deles */
  /* Tudo que for coluna A fica na A */
  .col-a {
    grid-area: A;
  }
  .col-b {
    grid-area: B;
  }


  section {
    padding-block: 16rem;
  }

  section header h2 {
    font-size: 4rem;
    line-height: 5.2rem;
  }

  /* ==================  NAVIGATION =================== */

  /* reset */
  /* Procure no nav .wrapper todos os elementos *   e reinicio tudo */
  nav#navigation .wrapper * {
    margin: 0;
    padding: 0;
    /* Valor inicial antes de eu ter colocado css */
    visibility: initial;
    display: initial;
    opacity: initial;
    flex-direction: initial;
    position: initial;
    font-size: initial;
    transform: initial;
    color: initial;
    background-color: initial;
    font-weight: initial;
    filter: initial;
  }

  nav#navigation .close-menu,
  nav#navigation .open-menu,
  nav#navigation .social-links {
    display: none;
  }

  nav#navigation .menu {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 60%;
  }

  nav#navigation .menu ul:nth-child(1) {
    display: flex;
    gap: 3.2rem;
  }

  nav#navigation .menu ul li a {
    color: var(--primary-color);
    opacity: 0.7;
  }

  nav#navigation .menu a.button {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 1rem 2.4rem;

    border: 0.1rem solid var(--primary-color);
    border-radius: 4rem;

    color: var(--primary-color);

    font-weight: 700;
    font-size: 1.4rem;
    line-height: 1.8rem;
    text-transform: uppercase;
  }

  nav#navigation .menu a.button:hover {
    background-color: var(--primary-color);
    border: none;
    color: white;
  }

  nav#navigation.scroll .menu ul li a {
    color: var(--brand-light-2);
    opacity: 0.6;
  }

  nav#navigation.scroll .menu a.button {
    color: white;
    border-color: white;
  }

  nav#navigation .menu li a {
    transition: opacity 0.4s;
  }

  nav#navigation .menu li a.active,
  nav#navigation .menu li a:hover {
    opacity: 1;
    font-weight: 700;
  }

  nav#navigation .menu li a::after {
    content: '';
    width: 0;
    height: 0.2rem;
    background-color: var(--primary-color);

    position: relative;
    bottom: -2rem;
    left: -0.5rem;

    display: block;

    transition: width 0.2s;
  }

  nav#navigation.scroll .menu li a::after {
    background-color: white;
  }

  nav#navigation .menu li a.active::after,
  nav#navigation .menu li a:hover::after {
    width: 100%;
    padding-inline: 0.8rem;
  }

  nav#navigation.scroll .menu li a.active,
  nav#navigation.scroll .menu li a:hover {
    opacity: 1;
  }

  nav#navigation.scroll .menu a.button.active,
  nav#navigation.scroll .menu a.button:hover {
    background-color: var(--primary-color);
    filter: brightness(1.3);
    border: none;
  }

  /* ==================  HOME =================== */

  #home::before {
    /* A gente tira de 86% os 7.2rem do nav */
    height: calc(96% - var(--nav-height));
  }

  #home {
    padding-top: var(--nav-height);
  }

  #home .wrapper {
    /* No grid eu posso definir linhas e colunas, como se fosse uma tabela. E trabalhar com os elementos da forma que eu quiser */
    /* duas colunas, usando unidades de medidas responsiveis/flexivel, que é a fração -> fr  */
    /* grid-template-columns: 1fr 2fr 1fr; */

    /* 2 colunas -> Parte de cima das colunas:                                AREAS: A, B e C
                                                A(coluna1 = 60.5rem = primeira parte) B(coluna2 = 1fr = imagem) 
                                                ===============================================================
                    Parte de baixo das colunas: C(coluna1 = status)                   C(coluna2 = status) ou seja status ocupa tudo da area C
    */
    /* Nesse caso eu estou falando para primeiro coluna 60.5rem e para a segunda 1 fração, ou seja 2 colunas */
    grid-template-columns: 60.5rem 1fr;
    /* Com o areas eu escolho a onde eu deixo o elemento */
    grid-template-areas:
      'A B'
      'C C';
  }

  /* Com isso eu organizo as colunas */
  #home .col-a {
    /* virou geral */
    /* grid-area: A; */

    /* Somente isso que é especifico da col-a do home */
    text-align: left;
    align-self: center;
  }

  /* Virou geral */
  /* #home .col-b {
    grid-area: B;
  } */

  #home h1 {
    font-size: 5.2rem;
  }

  #home .content p {
    font-size: 1.8rem;
  }

  #home .stats {
    grid-area: C;

    flex-direction: row;

    padding: 6rem;
    gap: 0;
  }

  /* Procura pra mim dentro de stats, que tenha um stat anterior ao stat */
  #home .stats .stat + .stat {
    border-left: 0.1rem solid var(--primary-color);
  }

  /* Dessa forma eu defino o tamanho das caixas, quando coloco flex: 1 eu faço com que cada um dos filhos preencha por igual o espaçamento na caixa que eles estao  */
  #home .stats .stat {
    flex: 1;
  }

  #home .button {
    margin: 0;
  }

  #home img {
    width: 42rem;
  }

  /* ==================  Services =================== */
  #services h2 {
    width: 47rem;
    margin-inline: auto;
  }

  #services .cards {
    flex-direction: row;
    /* Encaixe os conteudos, mas que respeite o tamanho do card */
    flex-wrap: wrap;
    gap: 4rem;
  }

  #services .card{
    width: 30%;
    /* Faz o cartao crescer. Ou seja, ele vai preencher o espaço restante que ele tem, crescendo conforme a necessidade */
    flex-grow: 1;
  }

  /* ==================  About =================== */
  #about .wrapper {
    /* Duas colunas por iguais flexiveis */
    /* grid-template-columns: 1fr 1fr; */
    
    grid-template-columns: 48rem 1fr;
    grid-template-areas: 'B A';
    gap: 6.7rem;
  }

  #about .col-a {
    align-self: center;
  }

  #about .content p {
    margin-bottom: 0;
  }

  /* ==================  CONTACT =================== */
  #contact .wrapper {
    grid-template-columns: 1fr 57rem;
    grid-template-areas: 'A B';
  }

  #contact h2 {
    width: 40.4rem;
  }

  /* ==================  footer =================== */
  footer {
    padding-block: 8rem;
  }

  footer .wrapper{
    grid-template-columns: 1fr 1fr;
    grid-template-areas: 'A B';
  }

  footer .col-a{
    /* Alinha ele mesmo ao centro */
    align-self: center;
  }

  footer .col-b {
    align-self: center;
    justify-self: flex-end;
  }

  footer p {
    margin-bottom: 0;
  }
} 
